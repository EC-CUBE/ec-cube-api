<?php

namespace Plugin\EccubeApi\Repository\OAuth2;

use Doctrine\ORM\EntityRepository;
use OAuth2\Storage\ClientCredentialsInterface;
use Symfony\Component\Routing\Exception\MethodNotAllowedException;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Kentaro Ohkouchi
 * @link http://bshaffer.github.io/oauth2-server-php-docs/cookbook/doctrine2/
 */
class ClientRepository extends EntityRepository implements ClientCredentialsInterface
{
    /**
     * Client ID を指定して Client のフィールドの配列を取得します.
     *
     * @param string $clientIdentifier Client ID の文字列
     * @return array Client のフィールドの配列を取得します.
     */
    public function getClientDetails($clientIdentifier)
    {
        $client = $client = $this->findOneBy(array('client_identifier' => $clientIdentifier));
        if ($client) {
            $client = $client->toArray();
        }
        return $client;
    }

    /**
     * Client ID と Client secret の妥当性をチェックします.
     *
     * @param string $clientIdentifier Client ID の文字列
     * @param string $clientSecret Client secret の文字列
     * @return boolean 妥当な場合 true
     */
    public function checkClientCredentials($clientIdentifier, $clientSecret = NULL)
    {
        $client = $client = $this->findOneBy(array('client_identifier' => $clientIdentifier));
        if ($client) {
            return $client->verifyClientSecret($clientSecret);
        }
        return false;
    }

    /**
     * 使用可能な認可タイプかどうかをチェックします.
     *
     * 以下の認可タイプ(grant_type)が使用可能です
     * - refresh_token
     * - authorization_code
     * - implicit
     *
     * @param string $clientId Client ID の文字列
     * @param string $grantType 認可タイプ(grant_type)の文字列
     * @return boolean 使用可能な認可タイプの場合 true
     */
    public function checkRestrictedGrantType($clientId, $grantType)
    {
        $alloewdGrantTypes = array('refresh_token', 'authorization_code', 'implicit');
        return in_array($grantType, $alloewdGrantTypes);
    }

    /**
     * Public Client かどうか.
     *
     * このメソッドは今のところ、常に false を返します.
     *
     * @param string $clientId Client ID の文字列
     * @return boolean Public Client の場合 true
     */
    public function isPublicClient($clientId)
    {
        return false;
    }

    /**
     * Client が使用可能な scope 文字列をスペース区切りで返します.
     *
     * @param string $clientId Client ID の文字列
     * @return string スペース区切りの使用可能な scope 文字列
     */
    public function getClientScope($clientId)
    {
        $client = $client = $this->findOneBy(array('client_identifier' => $clientId));
        if ($client) {
            $scopes = $client->getScopeAsArray();
            return implode(' ', $scopes);
        }
        return null;
    }
}
